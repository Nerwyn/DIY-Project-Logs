# This code was originally copied from the Home Assistant community forums and slightly modified to fit my curtain setup, but I cannot find the original forum post

esphome:
  name: "bedroom-curtains"
  on_boot:
    priority: -100
    then:
      - stepper.report_position:
          id: bedroom_curtain_stepper
          position: !lambda "return id(saved_position);"
      - stepper.set_target:
          id: bedroom_curtain_stepper
          target: !lambda "return id(saved_position);"
      - stepper.set_speed:
          id: bedroom_curtain_stepper
          speed: 2000 steps/s
      - script.execute: update_cover_position


esp32:
  board: esp32doit-devkit-v1 # Change to match your ESP device
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
    - service: set_stepper_target
      variables:
        target: int
      then:
        - stepper.set_target:
            id: bedroom_curtain_stepper
            target: !lambda 'return target;'
        - script.execute: record_stepper_position
    - service: set_stepper_speed
      variables:
        speed: int
      then:
        - stepper.set_speed:
            id: bedroom_curtain_stepper
            speed: !lambda 'return speed;'
    - service: set_stepper_position
      variables:
        stepper_position: int
      then:
        - stepper.report_position:
            id: bedroom_curtain_stepper
            position: !lambda "return stepper_position;"
        - stepper.set_target:
            id: bedroom_curtain_stepper
            target: !lambda "return stepper_position;"

ota:
  password: "let_this_autogenerate"

wifi:
  power_save_mode: none
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Bedroom_Curtains"
    password: "let_this_autogenerate"

captive_portal:

globals:
  - id: open_position
    type: int
    initial_value: '34000' # Change depending on how far you curtains need to travel
  - id: closed_position
    type: int
    initial_value: '1000'
  - id: saved_position
    type: int
    initial_value: '1000'
    restore_value: true

stepper:
  - platform: a4988 # I'm using the TMC2209 V3.1 stepper motor driver, which is a drop in replacement for the A4988 but runs quieter
    id: bedroom_curtain_stepper
    dir_pin: GPIO16
    step_pin: GPIO17
    max_speed: 2000 steps/s # Change depending on how fast you want your curtains to go / how fast your circuit can handle
    acceleration: inf
    deceleration: inf
    
cover:
  - platform: template
    id: "bedroom_curtain_cover"
    device_class: curtain
    name: "Bedroom Curtains"
    has_position: true
    optimistic: false
    open_action:
      - logger.log: "Opening"
      - cover.template.publish:
          id: bedroom_curtain_cover
          current_operation: OPENING
      - stepper.set_target:
          id: bedroom_curtain_stepper
          target: !lambda "return id(open_position);"
      - while:
          condition:
            lambda: 'return id(bedroom_curtain_stepper).current_position < id(open_position);'
          then:
            - script.execute: update_cover_position
            - delay: 1000 ms
      - script.execute: update_cover_position
      - script.execute: record_stepper_position
      - cover.template.publish:
          id: bedroom_curtain_cover
          current_operation: IDLE
    close_action:
      - logger.log: "Closing"
      - cover.template.publish:
          id: bedroom_curtain_cover
          current_operation: CLOSING
      - stepper.set_target:
          id: bedroom_curtain_stepper
          target: !lambda "return id(closed_position);"
      - while:
          condition:
            lambda: 'return id(bedroom_curtain_stepper).current_position > id(closed_position);'
          then:
            - script.execute: update_cover_position
            - delay: 1000 ms
      - script.execute: update_cover_position
      - script.execute: record_stepper_position
      - cover.template.publish:
          id: bedroom_curtain_cover
          current_operation: IDLE
    position_action:
      - logger.log: "Setting position"
      - stepper.set_target:
          id: bedroom_curtain_stepper
          target: !lambda 'return (float(pos) * float( float(id(open_position)) - float(id(closed_position)) )) + float(id(closed_position));'
      - while:
          condition:
            lambda: 'return id(bedroom_curtain_stepper).current_position != ((float(pos) * float( float(id(open_position)) - float(id(closed_position)) )) + float(id(closed_position)));'
          then:
            - script.execute: update_cover_position
            - delay: 1000 ms
      - script.execute: update_cover_position
      - script.execute: record_stepper_position
      - cover.template.publish:
          id: bedroom_curtain_cover
          current_operation: IDLE
    stop_action:
      - logger.log: "Stopping"
      - cover.template.publish:
          id: bedroom_curtain_cover
          current_operation: IDLE
      - stepper.set_target:
          id: bedroom_curtain_stepper
          target: !lambda 'return id(bedroom_curtain_stepper).current_position;'
      - script.execute: update_cover_position
      - script.execute: record_stepper_position

sensor:
  - platform: template
    name: "Current stepper position"
    lambda: return id(bedroom_curtain_stepper).current_position;
    update_interval: 5s

script:
  - id: update_cover_position
    then:
      - cover.template.publish:
          id: bedroom_curtain_cover
          position: !lambda 'return float( float(id(bedroom_curtain_stepper).current_position) - float(id(closed_position))) / float( float(id(open_position)) - float(id(closed_position)) );'
  - id: record_stepper_position
    then:
      - globals.set:
          id: saved_position
          value: !lambda 'return id(bedroom_curtain_stepper).current_position;'